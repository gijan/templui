package components

import "github.com/axzilla/templui/utils"

// TooltipSide definiert die Position des Tooltips relativ zum Trigger
type TooltipSide string

const (
	TooltipTop    TooltipSide = "top"
	TooltipRight  TooltipSide = "right"
	TooltipBottom TooltipSide = "bottom"
	TooltipLeft   TooltipSide = "left"
)

type TooltipVariant string

const (
	TooltipDefault     TooltipVariant = "default"
	TooltipSecondary   TooltipVariant = "secondary"
	TooltipDestructive TooltipVariant = "destructive"
)

// TooltipProps configures the Tooltip component
type TooltipProps struct {
	Trigger    templ.Component  // The element that triggers the tooltip
	Content    templ.Component  // The tooltip content
	Side       TooltipSide      // Tooltip position relative to trigger
	ShowArrow  bool             // Whether to show the arrow pointer
	Variant    TooltipVariant   // Visual style variant
	Class      string           // Additional CSS classes
	Attributes templ.Attributes // Additional HTML attributes
}

func getTooltipSideClass(side TooltipSide) string {
	switch side {
	case TooltipTop:
		return "bottom-full left-1/2 -translate-x-1/2 mb-2"
	case TooltipRight:
		return "left-full top-1/2 -translate-y-1/2 ml-2"
	case TooltipBottom:
		return "top-full left-1/2 -translate-x-1/2 mt-2"
	case TooltipLeft:
		return "right-full top-1/2 -translate-y-1/2 mr-2"
	default:
		return "bottom-full left-1/2 -translate-x-1/2 mb-2" // Top
	}
}

func getTooltipVariantClass(variant TooltipVariant) string {
	switch variant {
	case TooltipDefault:
		return "bg-bg text-primary-foreground"
	case TooltipSecondary:
		return "bg-secondary text-secondary-foreground"
	case TooltipDestructive:
		return "bg-destructive text-destructive-foreground"
	default:
		return "bg-foreground text-background"
	}
}

func getArrowClass(side TooltipSide) string {
	switch side {
	case TooltipTop:
		return "bottom-[-4px] left-1/2 -translate-x-1/2"
	case TooltipRight:
		return "left-[-4px] top-1/2 -translate-y-1/2"
	case TooltipBottom:
		return "top-[-4px] left-1/2 -translate-x-1/2"
	case TooltipLeft:
		return "right-[-4px] top-1/2 -translate-y-1/2"
	default:
		return "bottom-[-4px] left-1/2 -translate-x-1/2" // Top
	}
}

func getArrowColor(variant TooltipVariant) string {
	switch variant {
	case TooltipDefault:
		return "bg-foreground"
	case TooltipSecondary:
		return "bg-secondary"
	case TooltipDestructive:
		return "bg-destructive"
	default:
		return "bg-foreground"
	}
}

// A small pop-up box that appears when a user hovers over an element
templ Tooltip(props TooltipProps) {
	<div class="relative inline-block group">
		@props.Trigger
		<div
			class={
				utils.TwMerge(
					"absolute w-max z-50 pointer-events-none",
					"text-xs px-4 py-1 rounded-lg",
					"transition-opacity duration-200 delay-500 opacity-0 group-hover:opacity-100",
					"whitespace-nowrap",
					getTooltipSideClass(props.Side),
					getTooltipVariantClass(props.Variant),
					props.Class,
				),
			}
		>
			if props.ShowArrow {
				<div
					class={
						utils.TwMerge(
							"absolute h-2 w-2 rotate-45",
							getArrowClass(props.Side),
							getArrowColor(props.Variant),
						),
					}
				></div>
			}
			@props.Content
		</div>
	</div>
}
