package components

import "github.com/axzilla/templui/utils"

type ChartType string

const (
	ChartTypeBar      ChartType = "bar"
	ChartTypeLine     ChartType = "line"
	ChartTypePie      ChartType = "pie"
	ChartTypeDoughnut ChartType = "doughnut"
	ChartTypeRadar    ChartType = "radar"
)

// ChartDataset represents a dataset for Chart.js
// Contains the data points and visual styling for a single data series
type ChartDataset struct {
	Label           string    `json:"label"`                     // Name of the dataset to be displayed in legend
	Data            []float64 `json:"data"`                      // Actual data points for the chart
	BorderWidth     int       `json:"borderWidth,omitempty"`     // Width of the line/bar border in pixels
	BorderColor     string    `json:"borderColor,omitempty"`     // Color of the line/bar border
	BackgroundColor string    `json:"backgroundColor,omitempty"` // Background/fill color of the chart elements
	Tension         float64   `json:"tension,omitempty"`         // Smoothing of the line (0 = straight lines, 1 = maximum curve)
	Fill            bool      `json:"fill,omitempty"`            // Whether to fill the area under the line
	Stepped         bool      `json:"stepped,omitempty"`         // Whether to draw the line as a stepped line
}

// ChartOptions represents Chart.js options
// Contains general chart configuration options
type ChartOptions struct {
	Responsive bool `json:"responsive,omitempty"` // Whether the chart should resize with its container
	Legend     bool `json:"legend,omitempty"`     // Whether to display the legend
}

// ChartData represents all data needed for Chart.js
// Contains both the dataset and labels
type ChartData struct {
	Labels   []string       `json:"labels"`   // Labels for data points (X-axis labels for most charts)
	Datasets []ChartDataset `json:"datasets"` // Array of datasets to be displayed
}

// ChartConfig represents the complete Chart.js configuration
// This is the full configuration that gets passed to Chart.js
type ChartConfig struct {
	Type        ChartType    `json:"type"`                 // Type of chart (line, bar, etc.)
	Data        ChartData    `json:"data"`                 // Data and datasets
	Options     ChartOptions `json:"options,omitempty"`    // Chart display options
	ShowLegend  bool         `json:"showLegend,omitempty"` // Whether to display the legend
	ShowXAxis   bool         `json:"showXAxis"`            // Whether to display the X-axis line
	ShowYAxis   bool         `json:"showYAxis"`            // Whether to display the Y-axis line
	ShowXLabels bool         `json:"showXLabels"`          // Whether to display X-axis labels
	ShowYLabels bool         `json:"showYLabels"`          // Whether to display Y-axis labels
	ShowXGrid   bool         `json:"showXGrid"`            // Whether to display X-axis grid lines
	ShowYGrid   bool         `json:"showYGrid"`            // Whether to display Y-axis grid lines
	Horizontal  bool         `json:"horizontal"`           // Whether the chart should be horizontal
	Stacked     bool         `json:"stacked"`              // Whether datasets should be stacked
}

// ChartProps for the Chart component
// Properties that can be passed to the Chart component
type ChartProps struct {
	Type        ChartType    // Type of chart to render
	Data        ChartData    // Data to display in the chart
	Options     ChartOptions // Additional chart options
	ShowLegend  bool         // Whether to display the legend
	ShowXAxis   bool         // Whether to display the X-axis line
	ShowYAxis   bool         // Whether to display the Y-axis line
	ShowXLabels bool         // Whether to display X-axis labels
	ShowYLabels bool         // Whether to display Y-axis labels
	ShowXGrid   bool         // Whether to display X-axis grid lines
	ShowYGrid   bool         // Whether to display Y-axis grid lines
	Horizontal  bool         // Whether the chart should be horizontal
	Stacked     bool         // Whether datasets should be stacked
	Class       string       // Additional CSS classes
}

// ChartScripts ensures Chart.js and initialization code is only loaded once per page
// This prevents duplicate script loading when multiple charts are used
templ ChartScripts() {
	{{ handle := templ.NewOnceHandle() }}
	@handle.Once() {
		<!-- Load Chart.js library -->
		<script defer nonce={ templ.GetNonce(ctx) } src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		<!-- Initialize charts -->
		<script nonce={ templ.GetNonce(ctx) }>
			document.addEventListener('DOMContentLoaded', function() {
				
				// Store chart instances to allow updating and cleanup
				const chartInstances = {};

				// Function to get the current theme colors from CSS variables
				// This ensures charts match the current site theme
				function getThemeColors() {
					const computedStyle = getComputedStyle(document.documentElement);
					return {
						foreground: computedStyle.getPropertyValue('--foreground').trim(),
						background: computedStyle.getPropertyValue('--background').trim(),
						mutedForeground: computedStyle.getPropertyValue('--muted-foreground').trim(),
						border: computedStyle.getPropertyValue('--border').trim()
					};
				}

				// Function to initialize or update all charts
				// This is called initially and whenever the theme changes
				function initCharts() {
					// Get current theme colors
					const colors = getThemeColors();

					// Process each chart container on the page
					document.querySelectorAll('.chart-container').forEach(container => {
						const canvas = container.querySelector('canvas');
						if (!canvas) return;

						const dataId = canvas.getAttribute('data-chart-id');
						const dataElement = document.getElementById(dataId);
						if (!dataElement) return;

						// Destroy existing chart instance if it exists
						// This prevents memory leaks when updating charts
						if (chartInstances[canvas.id]) {
							chartInstances[canvas.id].destroy();
						}

						// Parse the chart configuration from JSON
						const chartConfig = JSON.parse(dataElement.textContent);

						// Set global defaults for points
						// Hide points by default but show on hover
						Chart.defaults.elements.point.radius = 0;
						Chart.defaults.elements.point.hoverRadius = 5;

						// Create the chart with theme-aware colors
						const chart = new Chart(canvas, {
							...chartConfig,
							options: {
								// Configure interaction mode based on chart type
								interaction: {
									intersect: false,
									axis: "xy",
									mode: chartConfig.type === "pie" || 
											chartConfig.type === "doughnut" ||
											chartConfig.type === "bar" ||
											chartConfig.type === "radar" ? "nearest" : "index"
								},
								// Set axis orientation (horizontal or vertical)
								indexAxis: chartConfig.horizontal ? "y" : "x",
								// Configure plugins (legend, tooltip)
								plugins: {
									legend: {
										display: chartConfig.showLegend || false,
										labels: {
											color: colors.foreground
										}
									},
									tooltip: {
										backgroundColor: colors.background,
										bodyColor: colors.mutedForeground,
										titleColor: colors.foreground,
										borderColor: colors.border,
										borderWidth: 1
									}
								},
								// Configure scales based on chart type
								scales: chartConfig.type === "radar" ? {
									// Radar chart uses a radial (r) scale
									r: {
										grid: {
											color: colors.border,
											display: chartConfig.showYGrid || true
										},
										ticks: {
											color: colors.mutedForeground,
											backdropColor: 'transparent',
											display: chartConfig.showYLabels || true
										},
										angleLines: {
											color: colors.border,
											display: chartConfig.showXGrid || true
										},
										pointLabels: {
											color: colors.foreground,
											font: {
												size: 12
											}
										},
										border: {
											display: chartConfig.showYAxis || false,
											color: colors.border
										},
										beginAtZero: true
									}
								} : {
									// Standard charts use x and y scales
									x: {
										beginAtZero: true,
										// Control visibility of axis components
										display: chartConfig.showXLabels || chartConfig.showXGrid || chartConfig.showXAxis,
										border: {
											display: chartConfig.showXAxis || false
										},
										ticks: {                                      
											display: chartConfig.showXLabels || false,   
											color: colors.mutedForeground
										},
										grid: {
											display: chartConfig.showXGrid || false,
											color: colors.border
										},
										stacked: chartConfig.stacked
									},
									y: {
										// Add offset to prevent clipping of data points
										offset: true,
										beginAtZero: true,
										// Control visibility of axis components
										display: chartConfig.showYLabels || chartConfig.showYGrid || chartConfig.showYAxis,
										border: {
											display: chartConfig.showYAxis || false
										},
										ticks: {                                      
											display: chartConfig.showYLabels || false,   
											color: colors.mutedForeground
										},
										grid: {
											display: chartConfig.showYGrid || false,
											color: colors.border
										},
										stacked: chartConfig.stacked
									}
								}
							}
						});
			
						// Store chart instance for later reference
						chartInstances[canvas.id] = chart;
					});
				}

				// Initialize charts when page loads
				initCharts();

				// Update charts when window resizes
				window.addEventListener('resize', function() {
					for (let id in chartInstances) {
						chartInstances[id].resize();
					}
				});

				// Watch for theme changes using MutationObserver
				// This detects when CSS variables change
				const observer = new MutationObserver(() => {
					// Small delay to ensure CSS variables are updated
					setTimeout(initCharts, 50);
				});

				observer.observe(document.documentElement, { attributes: true });

				// Wait for Alpine.js initialization if it's being used
				document.addEventListener('alpine:initialized', () => {
					// Listen for theme change events
					document.addEventListener('theme-changed', initCharts);
				});
			});
		</script>
	}
}

// Beautiful charts. Built using Chart.js.
templ Chart(props ChartProps) {
	<!-- Generate unique IDs for this chart -->
	{{ chartId := "chart-" + utils.RandomID() }}
	{{ dataId := chartId + "-data" }}
	<!-- Chart container -->
	<div class={ utils.TwMerge("chart-container relative", props.Class) }>
		<canvas id={ chartId } data-chart-id={ dataId }></canvas>
	</div>
	{{
	// Create chart config with defaults
	chartConfig := ChartConfig{
		Type:        props.Type,
		Data:        props.Data,
		Options:     props.Options,
		ShowLegend:  props.ShowLegend,
		ShowXAxis:   props.ShowXAxis,
		ShowYAxis:   props.ShowYAxis,
		ShowXLabels: props.ShowXLabels,
		ShowYLabels: props.ShowYLabels,
		ShowXGrid:   props.ShowXGrid,
		ShowYGrid:   props.ShowYGrid,
		Horizontal:  props.Horizontal,
		Stacked:     props.Stacked,
	}
	}}
	@templ.JSONScript(dataId, chartConfig)
}
