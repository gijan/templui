package components

import "github.com/axzilla/templui/utils"

type Tab struct {
	ID      string
	Title   string
	Content templ.Component
}

type TabsProps struct {
	Tabs                  []Tab
	TabsContainerClass    string
	ContentContainerClass string
}

templ TabsScript() {
	<script nonce={ templ.GetNonce(ctx) }>
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.tabs-component').forEach(tabs => {
                const tabID = tabs.dataset.tabs;
                const buttons = tabs.querySelectorAll(`[data-tab-button="${tabID}"]`);
                const contents = tabs.querySelectorAll(`[data-tab-content="${tabID}"]`);
                const marker = tabs.querySelector(`[data-tab-marker="${tabID}"]`);

                if (marker) {
                    marker.style.width = buttons[0].offsetWidth + 'px';
                    marker.style.height = buttons[0].offsetHeight + 'px';
                    marker.style.left = buttons[0].offsetLeft + 'px';
                }

                buttons.forEach((btn, idx) => {
                    btn.onclick = () => {
                        buttons.forEach(b => b.classList.remove('text-foreground', 'bg-background', 'shadow-xs'));
                        btn.classList.add('text-foreground', 'bg-background', 'shadow-xs');
                        contents.forEach(c => c.classList.add('hidden'));
                        contents[idx].classList.remove('hidden');
                        marker.style.width = btn.offsetWidth + 'px';
                        marker.style.height = btn.offsetHeight + 'px';
                        marker.style.left = btn.offsetLeft + 'px';
                    };
                });
            });
        });
    </script>
}

templ Tabs(props TabsProps) {
	{{ tabID := utils.RandomID() }}
	<div class="tabs-component relative" data-tabs={ tabID }>
		<div class={ "relative flex items-center justify-center h-10 p-1 rounded-lg select-none bg-muted text-muted-foreground", props.TabsContainerClass }>
			for i, tab := range props.Tabs {
				<button
					type="button"
					data-tab-button={ tabID }
					class={ "relative z-20 flex-1 inline-flex items-center justify-center h-8 px-3 text-sm font-medium transition-all rounded-md cursor-pointer whitespace-nowrap hover:text-foreground" ,
                        templ.KV(" text-foreground bg-background shadow-xs", i == 0) }
				>
					{ tab.Title }
				</button>
			}
			<div data-tab-marker={ tabID } class="absolute left-0 z-10 h-full duration-300 ease-out">
				<div class="w-full h-full bg-background rounded-md shadow-xs"></div>
			</div>
		</div>
		<div class={ "relative mt-2", props.ContentContainerClass }>
			for i, tab := range props.Tabs {
				<div
					data-tab-content={ tabID }
					class={ "relative" ,templ.KV(" hidden", i != 0) }
				>
					@tab.Content
				</div>
			}
		</div>
	</div>
}
