package components

import (
	"github.com/axzilla/templui/utils"
)

// SpinnerSize represents the available sizes for the Spinner component
type SpinnerSize string

const (
	SpinnerSizeSm SpinnerSize = "sm" // Small (24px)
	SpinnerSizeMd SpinnerSize = "md" // Medium (32px) - default
	SpinnerSizeLg SpinnerSize = "lg" // Large (48px)
)

// SpinnerProps configures the Spinner component
type SpinnerProps struct {
	Size       SpinnerSize      // Controls the size of the spinner (sm, md, lg)
	Color      string           // Custom color - uses theme colors if empty
	Text       string           // Optional text to display below the spinner
	Class      string           // Additional CSS classes
	Attributes templ.Attributes // Additional HTML attributes
}

// spinnerSizeClass returns the appropriate size class based on the size prop
func spinnerSizeClass(size SpinnerSize) string {
	switch size {
	case SpinnerSizeSm:
		return "w-6 h-6"
	case SpinnerSizeLg:
		return "w-12 h-12"
	default:
		return "w-8 h-8" // Default to medium
	}
}

// borderSpinnerClass returns the appropriate border-width class based on the size prop
func borderSpinnerClass(size SpinnerSize) string {
	switch size {
	case SpinnerSizeSm:
		return "border-[3px]"
	case SpinnerSizeLg:
		return "border-[5px]"
	default:
		return "border-4" // Default to medium
	}
}

// textSizeClass returns the appropriate text size class based on spinner size
func textSizeClass(size SpinnerSize) string {
	switch size {
	case SpinnerSizeSm:
		return "text-sm"
	case SpinnerSizeLg:
		return "text-lg"
	default:
		return "text-base" // Default to medium
	}
}

// Spinner component for indicating loading states with customizable options
templ Spinner(props SpinnerProps) {
	<div
		class={ utils.TwMerge(
				"inline-flex flex-col items-center justify-center",
				props.Class,
			) }
		aria-label="Loading"
		role="status"
		{ props.Attributes... }
	>
		<!-- Ring spinner animation with longer visible arc -->
		<div
			class={ utils.TwMerge(
					"animate-spin rounded-full",
					spinnerSizeClass(props.Size),
					borderSpinnerClass(props.Size),
					utils.TwIfElse(
						props.Color == "",
						"border-primary border-b-transparent", // Only bottom is transparent (75% visible)
						"border-current border-b-transparent", // Only bottom is transparent (75% visible)
					),
					utils.TwIfElse(
						props.Color != "",
						props.Color,
						"",
					),
				) }
		></div>
		if props.Text != "" {
			<span
				class={ utils.TwMerge(
					"mt-2 text-center",
					textSizeClass(props.Size),
					"text-foreground",
				) }
			>{ props.Text }</span>
		}
	</div>
}
