// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/axzilla/templui/utils"

// TooltipSide definiert die Position des Tooltips relativ zum Trigger
type TooltipSide string

const (
	TooltipTop    TooltipSide = "top"
	TooltipRight  TooltipSide = "right"
	TooltipBottom TooltipSide = "bottom"
	TooltipLeft   TooltipSide = "left"
)

type TooltipVariant string

const (
	TooltipDefault     TooltipVariant = "default"
	TooltipSecondary   TooltipVariant = "secondary"
	TooltipDestructive TooltipVariant = "destructive"
)

// TooltipProps configures the Tooltip component
type TooltipProps struct {
	Trigger    templ.Component  // The element that triggers the tooltip
	Content    templ.Component  // The tooltip content
	Side       TooltipSide      // Tooltip position relative to trigger
	ShowArrow  bool             // Whether to show the arrow pointer
	Variant    TooltipVariant   // Visual style variant
	Class      string           // Additional CSS classes
	Attributes templ.Attributes // Additional HTML attributes
}

func getTooltipSideClass(side TooltipSide) string {
	switch side {
	case TooltipTop:
		return "bottom-full left-1/2 -translate-x-1/2 mb-2"
	case TooltipRight:
		return "left-full top-1/2 -translate-y-1/2 ml-2"
	case TooltipBottom:
		return "top-full left-1/2 -translate-x-1/2 mt-2"
	case TooltipLeft:
		return "right-full top-1/2 -translate-y-1/2 mr-2"
	default:
		return "bottom-full left-1/2 -translate-x-1/2 mb-2" // Top
	}
}

func getTooltipVariantClass(variant TooltipVariant) string {
	switch variant {
	case TooltipDefault:
		return "bg-bg text-primary-foreground"
	case TooltipSecondary:
		return "bg-secondary text-secondary-foreground"
	case TooltipDestructive:
		return "bg-destructive text-destructive-foreground"
	default:
		return "bg-foreground text-background"
	}
}

func getArrowClass(side TooltipSide) string {
	switch side {
	case TooltipTop:
		return "bottom-[-4px] left-1/2 -translate-x-1/2"
	case TooltipRight:
		return "left-[-4px] top-1/2 -translate-y-1/2"
	case TooltipBottom:
		return "top-[-4px] left-1/2 -translate-x-1/2"
	case TooltipLeft:
		return "right-[-4px] top-1/2 -translate-y-1/2"
	default:
		return "bottom-[-4px] left-1/2 -translate-x-1/2" // Top
	}
}

func getArrowColor(variant TooltipVariant) string {
	switch variant {
	case TooltipDefault:
		return "bg-foreground"
	case TooltipSecondary:
		return "bg-secondary"
	case TooltipDestructive:
		return "bg-destructive"
	default:
		return "bg-foreground"
	}
}

// A small pop-up box that appears when a user hovers over an element
func Tooltip(props TooltipProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"relative inline-block group\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = props.Trigger.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 = []any{
			utils.TwMerge(
				"absolute w-max z-50 pointer-events-none",
				"text-xs px-4 py-1 rounded-lg",
				"transition-opacity duration-200 delay-500 opacity-0 group-hover:opacity-100",
				"whitespace-nowrap",
				getTooltipSideClass(props.Side),
				getTooltipVariantClass(props.Variant),
				props.Class,
			),
		}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/tooltip.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if props.ShowArrow {
			var templ_7745c5c3_Var4 = []any{
				utils.TwMerge(
					"absolute h-2 w-2 rotate-45",
					getArrowClass(props.Side),
					getArrowColor(props.Variant),
				),
			}
			templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var4...)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<div class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var4).String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/tooltip.templ`, Line: 1, Col: 0}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "\"></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = props.Content.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
