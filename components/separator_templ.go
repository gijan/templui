// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/axzilla/templui/utils"

// SeparatorOrientation defines the orientation of the separator
type SeparatorOrientation string

// SeparatorDecoration defines the decoration style of the separator
type SeparatorDecoration string

const (
	// SeparatorOrientationHorizontal defines a horizontal separator
	SeparatorOrientationHorizontal SeparatorOrientation = "horizontal"
	// SeparatorOrientationVertical defines a vertical separator
	SeparatorOrientationVertical SeparatorOrientation = "vertical"
)

const (
	// SeparatorDecorationNone defines no decoration style
	SeparatorDecorationNone SeparatorDecoration = "none"
	// SeparatorDecorationDashed defines a dashed decoration style
	SeparatorDecorationDashed SeparatorDecoration = "dashed"
	// SeparatorDecorationDotted defines a dotted decoration style
	SeparatorDecorationDotted SeparatorDecoration = "dotted"
)

// SeparatorProps configures the Separator component
type SeparatorProps struct {
	Orientation SeparatorOrientation // Direction of the separator (horizontal or vertical)
	Decoration  SeparatorDecoration  // Decoration style (none, dashed, dotted)
	Label       string               // Optional label text to display in the middle
	Class       string               // Additional CSS classes
	Attributes  templ.Attributes     // Additional HTML attributes
}

// Separator creates a visual divider between content with optional label
//
// Props:
//   - Orientation: Direction of the separator ("horizontal" or "vertical"). Default: "horizontal"
//   - Decoration: Decoration style (none, dashed, dotted). Default: none
//   - Label: Optional text to display in the middle of the separator
//   - Class: Additional CSS classes to apply
//   - Attributes: Additional HTML attributes to apply
func Separator(props SeparatorProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var templ_7745c5c3_Var2 = []any{
			utils.TwMerge(
				// Base styles
				"shrink-0",

				// For horizontal separators with label, we don't add border to the main div
				// as the border will be added to the span element inside
				utils.TwIf(getOrientationClasses(props.Orientation),
					!(props.Label != "" && props.Orientation == SeparatorOrientationHorizontal)),

				// We still want height/width even with label
				utils.TwIf("h-[1px] w-full", props.Orientation == SeparatorOrientationHorizontal),
				utils.TwIf("h-full w-[1px]", props.Orientation == SeparatorOrientationVertical),

				// Decoration styles - only apply to main container if no label
				utils.TwIf(getDecorationClasses(props.Decoration),
					!(props.Label != "" && props.Orientation == SeparatorOrientationHorizontal)),

				// Custom classes
				props.Class,
			),
		}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div role=\"separator\" aria-orientation=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(string(props.Orientation))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/separator.templ`, Line: 47, Col: 46}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/separator.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, props.Attributes)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, ">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if props.Label != "" && props.Orientation == SeparatorOrientationHorizontal {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<div class=\"relative flex items-center w-full\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 = []any{utils.TwMerge(
				"absolute w-full border-t",
				getDecorationClasses(props.Decoration),
			)}
			templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var5...)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<span class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var5).String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/separator.templ`, Line: 1, Col: 0}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "\" aria-hidden=\"true\"></span> <span class=\"relative mx-auto bg-background px-2 text-xs text-muted-foreground\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(props.Label)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/separator.templ`, Line: 82, Col: 18}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "</span></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// getOrientationClasses returns the appropriate CSS classes based on orientation
func getOrientationClasses(orientation SeparatorOrientation) string {
	if orientation == SeparatorOrientationVertical {
		return "border-l"
	}
	return "border-t"
}

// getDecorationClasses returns the appropriate CSS classes based on decoration style
func getDecorationClasses(decoration SeparatorDecoration) string {
	switch decoration {
	case SeparatorDecorationDashed:
		return "border-dashed"
	case SeparatorDecorationDotted:
		return "border-dotted"
	default:
		return ""
	}
}

var _ = templruntime.GeneratedTemplate
