package components

import (
	"github.com/axzilla/templui/icons"
	"github.com/axzilla/templui/utils"
	"math"
	"strconv"
	"strings"
)

// PaginationType defines the visual style of pagination
type PaginationType string

const (
	// PaginationTypeDefault shows numbered pages with first/last and next/previous controls
	PaginationTypeDefault PaginationType = "default"

	// PaginationTypeSimple shows only next/previous controls
	PaginationTypeSimple PaginationType = "simple"

	// PaginationTypeMinimal shows compact numbered pages with next/previous
	PaginationTypeMinimal PaginationType = "minimal"

	// PaginationTypeOutline uses outlined styling
	PaginationTypeOutline PaginationType = "outline"
)

// PaginationProps configures the Pagination component
type PaginationProps struct {
	CurrentPage  int              // Current active page (1-based index)
	TotalPages   int              // Total number of pages
	PageSize     int              // Number of items per page
	TotalItems   int              // Total number of items (alternative to TotalPages)
	MaxVisible   int              // Maximum number of page buttons to show
	Type         PaginationType   // Visual style variation
	ShowNumbers  bool             // Whether to show page numbers
	ShowControls bool             // Whether to show next/previous buttons
	UrlPattern   string           // URL pattern for links, use {page} placeholder, e.g. "/products?page={page}"
	HxGet        bool             // Whether to use hx-get instead of href for HTMX integration
	HxTarget     string           // Target element for HTMX updates
	HxSwap       string           // Swap method for HTMX updates
	Class        string           // Additional CSS classes
	Attributes   templ.Attributes // Additional HTML attributes
}

// calculateTotalPages determines the total number of pages based on either
// directly provided TotalPages or calculated from TotalItems and PageSize
func calculateTotalPages(props PaginationProps) int {
	if props.TotalPages > 0 {
		return props.TotalPages
	}

	if props.TotalItems > 0 && props.PageSize > 0 {
		return int(math.Ceil(float64(props.TotalItems) / float64(props.PageSize)))
	}

	return 1 // Default to at least 1 page
}

// getPageUrl generates a URL for a specific page
func getPageUrl(urlPattern string, page int) string {
	if urlPattern == "" {
		return "?page=" + strconv.Itoa(page)
	}

	// Replace {page} placeholder with actual page number
	return strings.Replace(urlPattern, "{page}", strconv.Itoa(page), 1)
}

// Pagination provides navigation through multiple pages of content
// with various layout and styling options.
templ Pagination(props PaginationProps) {
	// Set default values if not provided
	if props.MaxVisible <= 0 {
		{{ props.MaxVisible = 7 }}
	}
	if props.CurrentPage <= 0 {
		{{ props.CurrentPage = 1 }}
	}
	if props.Type == "" {
		{{ props.Type = PaginationTypeDefault }}
	}
	if !props.ShowNumbers && !props.ShowControls {
		{{ props.ShowNumbers = true }}
		{{ props.ShowControls = true }}
	}
	// Calculate total pages
	{{ totalPages := calculateTotalPages(props) }}
	// Ensure current page is in bounds
	if props.CurrentPage > totalPages {
		{{ props.CurrentPage = totalPages }}
	}
	<nav
		role="navigation"
		aria-label="Pagination"
		class={ utils.TwMerge(
				"flex flex-wrap items-center justify-center gap-1",
				props.Class,
			) }
		{ props.Attributes... }
	>
		// Show previous button if controls are enabled
		if props.ShowControls {
			@renderPrevButton(props)
		}
		// Show page numbers if enabled
		if props.ShowNumbers && props.Type != PaginationTypeSimple {
			@renderPageNumbers(props, totalPages)
		}
		// Show next button if controls are enabled
		if props.ShowControls {
			@renderNextButton(props, totalPages)
		}
	</nav>
}

// renderPrevButton creates the "Previous" navigation button
templ renderPrevButton(props PaginationProps) {
	// Disabled button when on first page
	if props.CurrentPage <= 1 {
		@Button(ButtonProps{
			Variant:  ButtonVariantGhost,
			Disabled: true,
		}) {
			@icons.ChevronLeft(icons.IconProps{Size: "16"})
			if props.Type != PaginationTypeMinimal {
				<span>Previous</span>
			}
		}
	} else {
		// Active button with link
		if props.HxGet {
			@Button(ButtonProps{
				Variant:  ButtonVariantGhost,
				HxGet:    getPageUrl(props.UrlPattern, props.CurrentPage-1),
				HxTarget: props.HxTarget,
				HxSwap:   props.HxSwap,
			}) {
				@icons.ChevronLeft(icons.IconProps{Size: "16"})
				if props.Type != PaginationTypeMinimal {
					<span>Previous</span>
				}
			}
		} else {
			@Button(ButtonProps{
				Variant: ButtonVariantGhost,
				Href:    getPageUrl(props.UrlPattern, props.CurrentPage-1),
			}) {
				@icons.ChevronLeft(icons.IconProps{Size: "16", Class: "mr-1"})
				if props.Type != PaginationTypeMinimal {
					<span>Previous</span>
				}
			}
		}
	}
}

// renderNextButton creates the "Next" navigation button
templ renderNextButton(props PaginationProps, totalPages int) {
	if props.CurrentPage >= totalPages {
		// Disabled button when on last page
		@Button(ButtonProps{
			Variant:  ButtonVariantGhost,
			Disabled: true,
		}) {
			if props.Type != PaginationTypeMinimal {
				<span>Next</span>
			}
			@icons.ChevronRight(icons.IconProps{Size: "16", Class: "ml-1"})
		}
	} else {
		// Active button with link
		if props.HxGet {
			@Button(ButtonProps{
				Variant:  ButtonVariantGhost,
				HxGet:    getPageUrl(props.UrlPattern, props.CurrentPage+1),
				HxTarget: props.HxTarget,
				HxSwap:   props.HxSwap,
			}) {
				if props.Type != PaginationTypeMinimal {
					<span>Next</span>
				}
				@icons.ChevronRight(icons.IconProps{Size: "16", Class: "ml-1"})
			}
		} else {
			@Button(ButtonProps{
				Variant: ButtonVariantGhost,
				Href:    getPageUrl(props.UrlPattern, props.CurrentPage+1),
			}) {
				if props.Type != PaginationTypeMinimal {
					<span>Next</span>
				}
				@icons.ChevronRight(icons.IconProps{Size: "16", Class: "ml-1"})
			}
		}
	}
}

// renderPageNumbers creates the numbered pagination buttons with ellipsis for large ranges
templ renderPageNumbers(props PaginationProps, totalPages int) {
	// First page button for non-minimal types
	if props.Type != PaginationTypeMinimal && props.CurrentPage > 3 && props.MaxVisible < totalPages {
		@renderPageButton(props, 1)
		// Show ellipsis if needed
		if props.CurrentPage > 4 {
			<span class="flex h-10 w-10 items-center justify-center text-sm">...</span>
		}
	}
	{{
	// Calculate visible page range
	start, end := calculateVisibleRange(props.CurrentPage, totalPages, props.MaxVisible)
	}}
	// Render visible page buttons
	for i := start; i <= end; i++ {
		@renderPageButton(props, i)
	}
	// Last page button for non-minimal types
	if props.Type != PaginationTypeMinimal && props.CurrentPage < totalPages - 2 && props.MaxVisible < totalPages {
		// Show ellipsis if needed
		if props.CurrentPage < totalPages - 3 {
			<span class="flex h-10 w-10 items-center justify-center text-sm">...</span>
		}
		@renderPageButton(props, totalPages)
	}
}

// renderPageButton creates an individual page number button
templ renderPageButton(props PaginationProps, page int) {
	if page == props.CurrentPage {
		// Current page (no link, just a button)
		@Button(ButtonProps{
			Variant: getButtonVariant(props.Type),
			Text:    strconv.Itoa(page),
			Size:    ButtonSizeIcon,
		})
	} else {
		// Other pages (with links)
		if props.HxGet {
			@Button(ButtonProps{
				Variant:  ButtonVariantGhost,
				Text:     strconv.Itoa(page),
				HxGet:    getPageUrl(props.UrlPattern, page),
				HxTarget: props.HxTarget,
				HxSwap:   props.HxSwap,
				Size:     ButtonSizeIcon,
			})
		} else {
			@Button(ButtonProps{
				Variant: ButtonVariantGhost,
				Text:    strconv.Itoa(page),
				Size:    ButtonSizeIcon,
				Href:    getPageUrl(props.UrlPattern, page),
			})
		}
	}
}

// calculateVisibleRange determines which page numbers should be visible
func calculateVisibleRange(currentPage, totalPages, maxVisible int) (int, int) {
	if totalPages <= maxVisible {
		return 1, totalPages
	}

	// Calculate half of the max visible pages
	half := maxVisible / 2

	// Calculate start and end
	start := currentPage - half
	end := currentPage + half

	// Adjust if out of bounds
	if start < 1 {
		end += (1 - start)
		start = 1
	}

	if end > totalPages {
		start -= (end - totalPages)
		if start < 1 {
			start = 1
		}
		end = totalPages
	}

	return start, end
}

// Get the appropriate button variant based on pagination type
func getButtonVariant(paginationType PaginationType) ButtonVariant {
	switch paginationType {
	case PaginationTypeOutline:
		return ButtonVariantOutline
	default:
		return ButtonVariantDefault
	}
}
